{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10369992,"sourceType":"datasetVersion","datasetId":6423250}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/adeylol/eu-countries-gdp-time-series-analysis-prediction?scriptVersionId=219328991\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Time-Series Analysis & Forecasting with GDP Data (Europe)\n\n## 1. **Data Preparation**\n   - We began by loading and preparing the GDP data for 15+ European countries spanning from 1960 to 2023.\n   - The data was cleaned, with missing values handled and adjusted for time series forecasting.\n   - We visualized the GDP trends for multiple countries using line plots.\n\n## 2. **Exploratory Data Analysis (EDA)**\n   - We performed basic exploratory analysis on the GDP data by visualizing trends, distributions, and correlations.\n\n## 3. **Modeling and Forecasting**\n### **Model 1: ARIMA (Autoregressive Integrated Moving Average)**\n   - We first implemented the ARIMA model to forecast GDP for `Germany` using the `SARIMAX` implementation.\n   - The model provided forecasts, and we calculated RMSE (Root Mean Squared Error) for performance evaluation.\n\n### **Model 2: Exponential Smoothing**\n   - Exponential Smoothing was used for modeling data with a trend and seasonality component.\n   - This method is suitable when the data exhibits simple patterns without the need for complex models.\n   - We evaluated the model's fit and compared it with the ARIMA model in terms of forecasting accuracy.\n\n### **Model 3: Prophet**\n   - Prophet was implemented to capture both trend and seasonality, as well as the ability to handle external events and holidays.\n   - This model is known for its robustness and ease of use for forecasting time-series data, particularly with irregular patterns.\n\n### **Model 4: Random Forest**\n   - We utilized the Random Forest model, which is a flexible machine learning technique that handles non-linear patterns in data well.\n   - Random Forest can model more complex relationships compared to traditional time-series methods.\n\n### **Model 5: LSTM (Long Short-Term Memory)**\n   - We explored deep learning by using LSTM, a type of Recurrent Neural Network (RNN), ideal for sequential data.\n   - Steps included:\n     - **Data Scaling**: The GDP data was normalized using MinMaxScaler.\n     - **Data Preparation**: We created training and test datasets with a time step of 5 years.\n     - **LSTM Model**: The LSTM model was built using two LSTM layers, followed by a Dense layer for forecasting.\n     - **Model Training**: The model was trained over 50 epochs.\n     - **Forecasting & Evaluation**: We forecasted future GDP values and evaluated the model using RMSE.\n\n## 4. **Plotting and Results**\n   - We plotted the actual vs. predicted values for the LSTM model and compared the forecasts generated by all models (ARIMA, Exponential Smoothing, Prophet, Random Forest, and LSTM).\n   - RMSE and other evaluation metrics were used to assess the performance of each model.\n\n## 5. **Alternative Models (Future Steps)**\n   - We considered other models and enhancements for time-series forecasting, including:\n     - **Hyperparameter tuning** for the LSTM and Random Forest models.\n     - **Feature engineering** to incorporate external factors such as economic indicators.\n     - Exploring models like **XGBoost** and **Support Vector Machines** for better performance.\n\n## Conclusion:\n   - We explored multiple forecasting techniques including **ARIMA**, **Exponential Smoothing**, **Prophet**, **Random Forest**, and **LSTM**.\n   - Each model offered unique strengths:\n     - **ARIMA** for time-series with linear trends.\n     - **Exponential Smoothing** for simple trends and seasonality.\n     - **Prophet** for complex seasonality and external factors.\n     - **Random Forest** for handling non-linear relationships.\n     - **LSTM** for deep learning on sequential data.\n   - The models were compared based on performance (RMSE) and their suitability for predicting GDP growth.\n   - Further improvements can include fine-tuning model parameters, exploring more advanced models, and incorporating external economic indicators.\n\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:40:15.497061Z","iopub.execute_input":"2025-01-26T12:40:15.497292Z","iopub.status.idle":"2025-01-26T12:40:16.611966Z","shell.execute_reply.started":"2025-01-26T12:40:15.497268Z","shell.execute_reply":"2025-01-26T12:40:16.610489Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/gdp-growth-of-european-countries/Europe_GDP.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:40:36.389457Z","iopub.execute_input":"2025-01-26T12:40:36.389856Z","iopub.status.idle":"2025-01-26T12:40:36.416877Z","shell.execute_reply.started":"2025-01-26T12:40:36.389815Z","shell.execute_reply":"2025-01-26T12:40:36.415783Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:40:43.25663Z","iopub.execute_input":"2025-01-26T12:40:43.257076Z","iopub.status.idle":"2025-01-26T12:40:43.301093Z","shell.execute_reply.started":"2025-01-26T12:40:43.257043Z","shell.execute_reply":"2025-01-26T12:40:43.300072Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_squared_error","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:45:42.608507Z","iopub.execute_input":"2025-01-26T12:45:42.609011Z","iopub.status.idle":"2025-01-26T12:45:44.307201Z","shell.execute_reply.started":"2025-01-26T12:45:42.608949Z","shell.execute_reply":"2025-01-26T12:45:44.306165Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Set the 'Year' as the index\ndata.set_index('Year', inplace=True)\nprint(data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:46:05.421032Z","iopub.execute_input":"2025-01-26T12:46:05.421593Z","iopub.status.idle":"2025-01-26T12:46:05.448334Z","shell.execute_reply.started":"2025-01-26T12:46:05.42156Z","shell.execute_reply":"2025-01-26T12:46:05.447175Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Line chart for GDP Trends\n# Iterate through each country in the dataset\n# Plot all countries on a single chart\ndata.plot(figsize=(15, 8), lw=1, title=\"GDP Trends for All Countries (1960-2023)\")\nplt.xlabel('Year')\nplt.ylabel('GDP (Current US$)')\nplt.legend(loc='upper left', ncol=2, fontsize='small')  # Adjust legend for readability\nplt.grid()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:48:56.442828Z","iopub.execute_input":"2025-01-26T12:48:56.443358Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Batch plotting for subsets of countries for readabilty\nbatch_size = 5\ncountries = data.columns.tolist()\nfor i in range(0, len(countries), batch_size):\n    subset = countries[i:i + batch_size]\n    data[subset].plot(figsize=(12, 6), lw=1.5, title=f\"GDP Trends for Countries {i+1}-{i+batch_size}\")\n    plt.xlabel('Year')\n    plt.ylabel('GDP (Current US$)')\n    plt.legend(loc='upper left', fontsize='small')\n    plt.grid()\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:49:16.666456Z","iopub.execute_input":"2025-01-26T12:49:16.666845Z","iopub.status.idle":"2025-01-26T12:49:17.929158Z","shell.execute_reply.started":"2025-01-26T12:49:16.666776Z","shell.execute_reply":"2025-01-26T12:49:17.927978Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Normalize data for heatmap\nnormalized_data = (data - data.min()) / (data.max() - data.min())\n\n# Plot heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(normalized_data.T, cmap=\"coolwarm\", cbar=True)\nplt.title(\"Heatmap of GDP Growth Across Countries\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"Countries\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:48:00.446101Z","iopub.execute_input":"2025-01-26T12:48:00.446458Z","iopub.status.idle":"2025-01-26T12:48:01.106898Z","shell.execute_reply.started":"2025-01-26T12:48:00.446433Z","shell.execute_reply":"2025-01-26T12:48:01.105808Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Decompose the GDP time series for a single country\ncountry = 'Germany'\ndecomposition = seasonal_decompose(data[country], model='multiplicative', period=12)\n\n# Plot decomposition\ndecomposition.plot()\nplt.suptitle(f\"Seasonal Decomposition of {country}'s GDP\", fontsize=6)\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:50:36.967474Z","iopub.execute_input":"2025-01-26T12:50:36.967882Z","iopub.status.idle":"2025-01-26T12:50:37.659817Z","shell.execute_reply.started":"2025-01-26T12:50:36.967849Z","shell.execute_reply":"2025-01-26T12:50:37.658551Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Perform ADF Test for stationarity\nresult = adfuller(data['Germany'])\nprint(f\"ADF Statistic: {result[0]}\")\nprint(f\"p-value: {result[1]}\")\nif result[1] <= 0.05:\n    print(\"The series is stationary.\")\nelse:\n    print(\"The series is not stationary.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:50:58.692018Z","iopub.execute_input":"2025-01-26T12:50:58.692421Z","iopub.status.idle":"2025-01-26T12:50:58.738929Z","shell.execute_reply.started":"2025-01-26T12:50:58.692392Z","shell.execute_reply":"2025-01-26T12:50:58.73771Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Forcasting\n# fitting with ARIMA model\n# Select a single country for forecasting\ncountry = 'Germany'\ngdp_data = data[country].dropna()\n\n# Split into train and test sets\ntrain_size = int(len(gdp_data) * 0.8)\ntrain, test = gdp_data[:train_size], gdp_data[train_size:]\n\n# Fit ARIMA model\nmodel = ARIMA(train, order=(2, 1, 2))  # Adjust order based on AIC or BIC\nmodel_fit = model.fit()\nprint(model_fit.summary())\n\n# Forecast\nforecast = model_fit.forecast(steps=len(test))\nplt.figure(figsize=(12, 6))\nplt.plot(train, label=\"Training Data\")\nplt.plot(test, label=\"Actual GDP\")\nplt.plot(test.index, forecast, label=\"Forecasted GDP\", linestyle='--')\nplt.title(f\"Forecasting GDP for {country}\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"GDP (Current US$)\")\nplt.legend()\nplt.show()\n\n# Evaluate the model\nrmse = np.sqrt(mean_squared_error(test, forecast))\nprint(f\"RMSE: {rmse}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:51:34.929022Z","iopub.execute_input":"2025-01-26T12:51:34.92939Z","iopub.status.idle":"2025-01-26T12:51:35.400658Z","shell.execute_reply.started":"2025-01-26T12:51:34.929364Z","shell.execute_reply":"2025-01-26T12:51:35.399481Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Exponential Smoothing (ETS)\n# Exponential Smoothing models are good for capturing level, trend, and seasonality in the data.\n\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\n\n# Fit the model\nets_model = ExponentialSmoothing(train, seasonal='add', trend='add', seasonal_periods=12).fit()\n\n# Forecast\nforecast = ets_model.forecast(steps=len(test))\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(train, label='Training Data')\nplt.plot(test, label='Actual GDP')\nplt.plot(test.index, forecast, label='Forecasted GDP', linestyle='--')\nplt.legend()\nplt.title(\"Exponential Smoothing Forecast\")\nplt.show()\n\n# Evaluate the model\nrmse = np.sqrt(mean_squared_error(test, forecast))\nprint(f\"ETS RMSE: {rmse}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:54:59.845584Z","iopub.execute_input":"2025-01-26T12:54:59.846038Z","iopub.status.idle":"2025-01-26T12:55:00.220503Z","shell.execute_reply.started":"2025-01-26T12:54:59.846009Z","shell.execute_reply":"2025-01-26T12:55:00.219205Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%pip install prophet\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:55:25.200409Z","iopub.execute_input":"2025-01-26T12:55:25.201065Z","iopub.status.idle":"2025-01-26T12:55:30.649321Z","shell.execute_reply.started":"2025-01-26T12:55:25.201025Z","shell.execute_reply":"2025-01-26T12:55:30.64788Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Prophet\n# Prophet is a robust time-series forecasting model designed for handling seasonality and holidays.\n\nfrom prophet import Prophet\n\n# Prepare data for Prophet\nprophet_data = data['Germany'].reset_index()\nprophet_data.columns = ['ds', 'y']  # Rename columns for Prophet\n\n# Fit the model\nprophet_model = Prophet()\nprophet_model.fit(prophet_data)\n\n# Make future predictions\nfuture = prophet_model.make_future_dataframe(periods=12, freq='Y')\nforecast = prophet_model.predict(future)\n\n# Plot the forecast\nprophet_model.plot(forecast)\nplt.title(\"Prophet Forecast\")\nplt.show()\n\n# Evaluate the model\nactual = prophet_data['y'][-len(test):].values\npredicted = forecast['yhat'][-len(test):].values\nrmse = np.sqrt(mean_squared_error(actual, predicted))\nprint(f\"Prophet RMSE: {rmse}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:56:36.772266Z","iopub.execute_input":"2025-01-26T12:56:36.772762Z","iopub.status.idle":"2025-01-26T12:56:38.700365Z","shell.execute_reply.started":"2025-01-26T12:56:36.772717Z","shell.execute_reply":"2025-01-26T12:56:38.699238Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%pip install tensorflow\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:56:49.956266Z","iopub.execute_input":"2025-01-26T12:56:49.956653Z","iopub.status.idle":"2025-01-26T12:56:54.232288Z","shell.execute_reply.started":"2025-01-26T12:56:49.956617Z","shell.execute_reply":"2025-01-26T12:56:54.230955Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Random Forest Regressor\n# A machine learning approach can also be applied for time-series forecasting.\n\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Prepare data for Random Forest\ntime_lags = 5  # Use the last 5 years for prediction\nX = np.array([gdp_data.values[i-time_lags:i] for i in range(time_lags, len(gdp_data))])\ny = gdp_data.values[time_lags:]\n\nX_train, X_test = X[:train_size - time_lags], X[train_size - time_lags:]\ny_train, y_test = y[:train_size - time_lags], y[train_size - time_lags:]\n\n# Fit Random Forest model\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Forecast\nrf_predictions = rf_model.predict(X_test)\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(test, label='Actual GDP')\nplt.plot(test.index, rf_predictions, label='Random Forest Forecast', linestyle='--')\nplt.legend()\nplt.title(\"Random Forest Forecast\")\nplt.show()\n\n# Evaluate the model\nrmse = np.sqrt(mean_squared_error(test, rf_predictions))\nprint(f\"Random Forest RMSE: {rmse}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:57:33.797068Z","iopub.execute_input":"2025-01-26T12:57:33.797418Z","iopub.status.idle":"2025-01-26T12:57:34.643574Z","shell.execute_reply.started":"2025-01-26T12:57:33.797393Z","shell.execute_reply":"2025-01-26T12:57:34.642566Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Long Short-Term Memory (LSTM)\n# LSTMs are deep learning models that are excellent for sequential data.\n\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\n\n# Prepare data for LSTM\nscaler = MinMaxScaler()\nscaled_data = scaler.fit_transform(gdp_data.values.reshape(-1, 1))\n\n# Create training and testing data\ndef create_dataset(data, time_step=1):\n    X, y = [], []\n    for i in range(len(data) - time_step - 1):\n        X.append(data[i:(i + time_step), 0])\n        y.append(data[i + time_step, 0])\n    return np.array(X), np.array(y)\n\ntime_step = 5  # Use the last 5 years for prediction\ntrain_data = scaled_data[:train_size]\ntest_data = scaled_data[train_size:]\n\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, y_test = create_dataset(test_data, time_step)\n\n# Reshape for LSTM input\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)\n\n# Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))\nmodel.add(LSTM(50, return_sequences=False))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=50, batch_size=32, verbose=1)\n\n# Forecast\nlstm_predictions = model.predict(X_test)\nlstm_predictions = scaler.inverse_transform(lstm_predictions)\n\n# Adjust the test dataset to align with lstm_predictions\nadjusted_test = test[time_step + 1:]\nadjusted_test_index = adjusted_test.index\n\n# Plot\nplt.figure(figsize=(12, 6))\nplt.plot(adjusted_test_index, adjusted_test, label='Actual GDP')\nplt.plot(adjusted_test_index, lstm_predictions, label='LSTM Forecast', linestyle='--')\nplt.legend()\nplt.title(\"LSTM Forecast\")\nplt.xlabel(\"Year\")\nplt.ylabel(\"GDP (Current US$)\")\nplt.grid()\nplt.show()\n\n# Evaluate the model\nrmse = np.sqrt(mean_squared_error(adjusted_test, lstm_predictions))\nprint(f\"LSTM RMSE: {rmse}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T12:59:43.833298Z","iopub.execute_input":"2025-01-26T12:59:43.833822Z","iopub.status.idle":"2025-01-26T12:59:49.426231Z","shell.execute_reply.started":"2025-01-26T12:59:43.833768Z","shell.execute_reply":"2025-01-26T12:59:49.425044Z"}},"outputs":[],"execution_count":null}]}